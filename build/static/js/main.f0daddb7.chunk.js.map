{"version":3,"sources":["logo.svg","components/pages/registraction/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Registration","useState","username","setUsername","password","setPassword","AppBar","position","alignitems","color","Toolbar","Grid","container","justify","wrap","item","Typography","variant","spacing","direction","className","Paper","elevation","component","onSubmit","event","preventDefault","alert","TextField","type","placeholder","fullWidth","name","value","onChange","required","autoFocus","Button","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f0daddb7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// noprotect\nimport React, {\n    useState\n} from \"react\";\nimport {\n    Button,\n    TextField,\n    Grid,\n    Paper,\n    AppBar,\n    Typography,\n    Toolbar,\n    Link,\n} from \"@material-ui/core\";\nimport './index.css';\n\n\nconst Registration = () => {\n\n\n\n    const [username, setUsername] = useState(\"\")\n    const [password, setPassword] = useState(\"\")\n    const [authflag, setAuthflag] = useState(1)\n\n\n    const handleChangeUsername = (e) => {\n        setUsername(e.target.value)\n    }\n\n    const handleChangePassWord = (e) => {\n        setPassword(e.target.value)\n    }\n\n\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        if (\n            username === \"nkeoualionel@gmail.com\" &&\n            password === \"1111\"\n        ) {\n            alert(\"Welcome\");\n        } else {\n            alert(\"Incorrect Credntials!\");\n        }\n    }\n\n    return ( \n        <div>\n        <AppBar position = \"static\"\n        alignitems = \"center\"\n        color = \"primary\" >\n        <Toolbar>\n        <Grid container justify = \"center\"\n                wrap = \"wrap\">\n        <Grid item>\n        <Typography variant = \"h6\" > </Typography>  \n        </Grid>  \n        </Grid>  </Toolbar>  \n        </AppBar>\n\n\n        <Grid container spacing = {0}\n              justify = \"center\" direction = \"row\" >\n\n        <Grid item>\n        <Grid container direction = \"column\"\n              justify = \"center\" spacing = {2}\n              className = \"login-form\" >\n\n        <Paper variant = \"elevation\" elevation = {2}\n                className = \"login-background\" >\n        <Grid item>\n        <Typography component = \"h1\"\n        variant = \"h5\" >\n        Registration\n        </Typography>  \n        </Grid> \n\n        <Grid item>\n\n        <form onSubmit = {handleSubmit}>\n\n        <Grid container direction = \"column\"\n        spacing = {2}>\n\n            <Grid item >\n                <TextField type = \"text\" placeholder = \"First Name\"\n                            fullWidth name = \"firstname\"\n                            variant = \"outlined\"\n                            value = {\"\" }onChange = {() => setPassword(password)} required/>\n            </Grid> \n\n             <Grid item >\n                 <TextField type = \"text\" placeholder = \"Last Name\"\n                            fullWidth name = \"lastname\"\n                            variant = \"outlined\"\n                            value = {\"\"}onChange = {() => setPassword(password)}\n                            required/>\n                 </Grid>\n\n             <Grid item >\n                 <TextField type = \"text\"\n                            placeholder = \"City\"\n                            fullWidth name = \"city\"\n                            variant = \"outlined\"\n                            value = {\"\"}\n                            onChange = {() => setPassword(password)}required/>\n                 </Grid> \n\n            <Grid item >\n                <TextField type = \"text\"\n                            placeholder = \"Country\"\n                            fullWidth name = \"country\"\n                            variant = \"outlined\"\n                            value = {\"\" }\n                            onChange = {\n                                () => setPassword(password)\n                            }\n                            required / >\n                </Grid>          \n\n\n        <Grid item>\n        <TextField type = \"email\" placeholder = \"Email\" fullWidth name = \"username\"\n                   variant = \"outlined\" value = {username}\n                   onChange = { () => setUsername(username)}\n                   required autoFocus/>\n        </Grid> \n\n        <Grid item >\n        <TextField  type = \"password\"\n                    placeholder = \"Password\"\n                    fullWidth name = \"password\"\n                    variant = \"outlined\"\n                    value = {password}\n                    onChange = {() => setPassword(password)}\n                    required/>\n        </Grid> \n\n         \n\n        <Grid item >\n        <Button variant = \"contained\"\n                color = \"primary\"\n                type = \"submit\"\n                className = \"button-block\" >\n        Create account </Button>  \n        </Grid>  \n        </Grid>  \n        </form>\n\n        </Grid> \n\n         \n        </Paper>  \n        </Grid>  \n        </Grid> \n        </Grid>\n\n\n        </div>\n\n    );\n\n}\n\n\nexport default Registration","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Login from './components/pages/authen/index.js';\nimport Registration from './components/pages/registraction/index.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n         <Registration/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}